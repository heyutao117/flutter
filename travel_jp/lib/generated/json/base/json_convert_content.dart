// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:travel_jp/model/classification_data_model_entity.dart';
import 'package:travel_jp/generated/json/classification_data_model_entity.g.dart';
import 'package:travel_jp/model/classification_videos_model_entity.dart';
import 'package:travel_jp/generated/json/classification_videos_model_entity.g.dart';
import 'package:travel_jp/model/home_data_model_entity.dart';
import 'package:travel_jp/generated/json/home_data_model_entity.g.dart';
import 'package:travel_jp/model/home_data_video_model_entity.dart';
import 'package:travel_jp/generated/json/home_data_video_model_entity.g.dart';
import 'package:travel_jp/model/knowledge_data_readingpage_entity.dart';
import 'package:travel_jp/generated/json/knowledge_data_readingpage_entity.g.dart';
import 'package:travel_jp/model/knowledge_data_readings_entity.dart';
import 'package:travel_jp/generated/json/knowledge_data_readings_entity.g.dart';

JsonConvert jsonConvert = JsonConvert();

class JsonConvert {

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }
  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
		final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type ==  "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type ==  "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else {
        return JsonConvert.fromJsonAsT<T>(value);
      }
    } catch (e, stackTrace) {
      print('asT<$T> $e $stackTrace');
      return null;
    }
  } 
	//Go back to a single instance by type
	static M? _fromJsonSingle<M>(Map<String, dynamic> json) {
		final String type = M.toString();
		if(type == (HYClassificationDataModelEntity).toString()){
			return HYClassificationDataModelEntity.fromJson(json) as M;
		}
		if(type == (HYClassificationVideosModelEntity).toString()){
			return HYClassificationVideosModelEntity.fromJson(json) as M;
		}
		if(type == (ClassificationVideosModelVlist).toString()){
			return ClassificationVideosModelVlist.fromJson(json) as M;
		}
		if(type == (ClassificationVideosModelVlistVideo).toString()){
			return ClassificationVideosModelVlistVideo.fromJson(json) as M;
		}
		if(type == (HYHomeDataModelEntity).toString()){
			return HYHomeDataModelEntity.fromJson(json) as M;
		}
		if(type == (HomeDataModelReadtype1).toString()){
			return HomeDataModelReadtype1.fromJson(json) as M;
		}
		if(type == (HomeDataModelReadtype2).toString()){
			return HomeDataModelReadtype2.fromJson(json) as M;
		}
		if(type == (HomeDataModelSliding).toString()){
			return HomeDataModelSliding.fromJson(json) as M;
		}
		if(type == (HomeDataModelVideos).toString()){
			return HomeDataModelVideos.fromJson(json) as M;
		}
		if(type == (HomeDataModelVideosAlbum).toString()){
			return HomeDataModelVideosAlbum.fromJson(json) as M;
		}
		if(type == (HomeDataModelVideosList).toString()){
			return HomeDataModelVideosList.fromJson(json) as M;
		}
		if(type == (HomeDataModelVideosListVideo).toString()){
			return HomeDataModelVideosListVideo.fromJson(json) as M;
		}
		if(type == (HYHomeDataVideoModelEntity).toString()){
			return HYHomeDataVideoModelEntity.fromJson(json) as M;
		}
		if(type == (HomeDataVideoModelVlist).toString()){
			return HomeDataVideoModelVlist.fromJson(json) as M;
		}
		if(type == (HomeDataVideoModelVlistVideo).toString()){
			return HomeDataVideoModelVlistVideo.fromJson(json) as M;
		}
		if(type == (HYKnowledgeDataReadingpageEntity).toString()){
			return HYKnowledgeDataReadingpageEntity.fromJson(json) as M;
		}
		if(type == (KnowledgeDataReadingpageArticles).toString()){
			return KnowledgeDataReadingpageArticles.fromJson(json) as M;
		}
		if(type == (HYKnowledgeDataReadingsEntity).toString()){
			return HYKnowledgeDataReadingsEntity.fromJson(json) as M;
		}
		if(type == (KnowledgeDataReadingsReadings).toString()){
			return KnowledgeDataReadingsReadings.fromJson(json) as M;
		}

		print("$type not found");
	
		return null;
}

  //list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<HYClassificationDataModelEntity>[] is M){
			return data.map<HYClassificationDataModelEntity>((Map<String, dynamic> e) => HYClassificationDataModelEntity.fromJson(e)).toList() as M;
		}
		if(<HYClassificationVideosModelEntity>[] is M){
			return data.map<HYClassificationVideosModelEntity>((Map<String, dynamic> e) => HYClassificationVideosModelEntity.fromJson(e)).toList() as M;
		}
		if(<ClassificationVideosModelVlist>[] is M){
			return data.map<ClassificationVideosModelVlist>((Map<String, dynamic> e) => ClassificationVideosModelVlist.fromJson(e)).toList() as M;
		}
		if(<ClassificationVideosModelVlistVideo>[] is M){
			return data.map<ClassificationVideosModelVlistVideo>((Map<String, dynamic> e) => ClassificationVideosModelVlistVideo.fromJson(e)).toList() as M;
		}
		if(<HYHomeDataModelEntity>[] is M){
			return data.map<HYHomeDataModelEntity>((Map<String, dynamic> e) => HYHomeDataModelEntity.fromJson(e)).toList() as M;
		}
		if(<HomeDataModelReadtype1>[] is M){
			return data.map<HomeDataModelReadtype1>((Map<String, dynamic> e) => HomeDataModelReadtype1.fromJson(e)).toList() as M;
		}
		if(<HomeDataModelReadtype2>[] is M){
			return data.map<HomeDataModelReadtype2>((Map<String, dynamic> e) => HomeDataModelReadtype2.fromJson(e)).toList() as M;
		}
		if(<HomeDataModelSliding>[] is M){
			return data.map<HomeDataModelSliding>((Map<String, dynamic> e) => HomeDataModelSliding.fromJson(e)).toList() as M;
		}
		if(<HomeDataModelVideos>[] is M){
			return data.map<HomeDataModelVideos>((Map<String, dynamic> e) => HomeDataModelVideos.fromJson(e)).toList() as M;
		}
		if(<HomeDataModelVideosAlbum>[] is M){
			return data.map<HomeDataModelVideosAlbum>((Map<String, dynamic> e) => HomeDataModelVideosAlbum.fromJson(e)).toList() as M;
		}
		if(<HomeDataModelVideosList>[] is M){
			return data.map<HomeDataModelVideosList>((Map<String, dynamic> e) => HomeDataModelVideosList.fromJson(e)).toList() as M;
		}
		if(<HomeDataModelVideosListVideo>[] is M){
			return data.map<HomeDataModelVideosListVideo>((Map<String, dynamic> e) => HomeDataModelVideosListVideo.fromJson(e)).toList() as M;
		}
		if(<HYHomeDataVideoModelEntity>[] is M){
			return data.map<HYHomeDataVideoModelEntity>((Map<String, dynamic> e) => HYHomeDataVideoModelEntity.fromJson(e)).toList() as M;
		}
		if(<HomeDataVideoModelVlist>[] is M){
			return data.map<HomeDataVideoModelVlist>((Map<String, dynamic> e) => HomeDataVideoModelVlist.fromJson(e)).toList() as M;
		}
		if(<HomeDataVideoModelVlistVideo>[] is M){
			return data.map<HomeDataVideoModelVlistVideo>((Map<String, dynamic> e) => HomeDataVideoModelVlistVideo.fromJson(e)).toList() as M;
		}
		if(<HYKnowledgeDataReadingpageEntity>[] is M){
			return data.map<HYKnowledgeDataReadingpageEntity>((Map<String, dynamic> e) => HYKnowledgeDataReadingpageEntity.fromJson(e)).toList() as M;
		}
		if(<KnowledgeDataReadingpageArticles>[] is M){
			return data.map<KnowledgeDataReadingpageArticles>((Map<String, dynamic> e) => KnowledgeDataReadingpageArticles.fromJson(e)).toList() as M;
		}
		if(<HYKnowledgeDataReadingsEntity>[] is M){
			return data.map<HYKnowledgeDataReadingsEntity>((Map<String, dynamic> e) => HYKnowledgeDataReadingsEntity.fromJson(e)).toList() as M;
		}
		if(<KnowledgeDataReadingsReadings>[] is M){
			return data.map<KnowledgeDataReadingsReadings>((Map<String, dynamic> e) => KnowledgeDataReadingsReadings.fromJson(e)).toList() as M;
		}

		print("${M.toString()} not found");
	
		return null;
}

  static M? fromJsonAsT<M>(dynamic json) {
		if(json == null){
			return null;
		}		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return _fromJsonSingle<M>(json as Map<String, dynamic>);
		}
	}
}